<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Black House</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tengyan.site/"/>
  <updated>2019-10-23T12:02:06.000Z</updated>
  <id>http://tengyan.site/</id>
  
  <author>
    <name>hetian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA  GC</title>
    <link href="http://tengyan.site/2019/10/23/JAVA-GC/"/>
    <id>http://tengyan.site/2019/10/23/JAVA-GC/</id>
    <published>2019-10-23T02:58:09.000Z</published>
    <updated>2019-10-23T12:02:06.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Oct 23 2019 20:02:30 GMT+0800 (GMT+08:00) --><h1 id="GARBAGE-COLLECTIONS"><a href="#GARBAGE-COLLECTIONS" class="headerlink" title="GARBAGE COLLECTIONS:"></a>GARBAGE COLLECTIONS:</h1><h2 id="1-Serial"><a href="#1-Serial" class="headerlink" title="1.Serial:"></a><em>1.Serial:</em></h2><blockquote><p>Client模式默认新生代收集器</p></blockquote><blockquote><p>单线程收集器,“ Stop The World ”–垃圾收集时暂停所有的工作线程</p></blockquote><blockquote><p>新生代复制算法,老年代标记-整理算法</p></blockquote><h2 id="2-ParNew"><a href="#2-ParNew" class="headerlink" title="2.ParNew:"></a><em>2.ParNew:</em></h2><blockquote><p><code>Serial</code>多线程版本,两收集器代码共用了很多</p></blockquote><blockquote><p>许多虚拟机Sever模式下首选新生代收集器</p></blockquote><blockquote><p>新生代复制算法,老年代标记-整理算法</p></blockquote><h2 id="3-Parallel-Scavenge"><a href="#3-Parallel-Scavenge" class="headerlink" title="3.Parallel Scavenge:"></a><em>3.Parallel Scavenge:</em></h2><blockquote><p>新生代收集器,复制算法收集器</p></blockquote><blockquote><p>并行多线程收集器</p></blockquote><blockquote><p>关注于可控制吞吐量</p></blockquote><blockquote><p>吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)</p></blockquote><blockquote><p>也称为“吞吐量优先”收集器</p></blockquote><blockquote><p>通过-XX:+UseAdaptiveSizePolicy参数值,可以让虚拟机根据当前系统运行情况收集性能监控信息,动态调整新生代的大小、Eden与Survivor比例、晋升老年代对象大小等参数,来提供最合适的停顿时间或最大吞吐量,这种调节方式称为GC自适应的调节策略,这也是<code>Parallel Scavenge</code>与<code>ParNew</code>重要区别</p></blockquote><h2 id="4-Serial-Old"><a href="#4-Serial-Old" class="headerlink" title="4.Serial Old:"></a><em>4.Serial Old:</em></h2><blockquote><p>单线程</p></blockquote><blockquote><p>标记整理算法</p></blockquote><blockquote><p><code>Serial</code>老年代版本</p></blockquote><h2 id="5-Parallel-Old"><a href="#5-Parallel-Old" class="headerlink" title="5.Parallel Old:"></a><em>5.Parallel Old:</em></h2><blockquote><p>多线程</p></blockquote><blockquote><p>标记整理算法</p></blockquote><blockquote><p><code>Parallel Scavenge</code>老年代版本</p></blockquote><blockquote><p><code>Parallel Scavenge</code>的老年代收集器只能选择<code>Serial Old</code> <em>(JDK1.6以前)</em>,因为<code>Serial Old</code>是单线程的,导致无法充分发挥服务器多CPU处理能力,因此这种组合吞吐量可能不一定高于<code>ParNew</code>和<code>CMS</code>组合 <em>(虽然<code>Parallel</code>注重吞吐量)</em></p></blockquote><blockquote><p><code>Parallel Old</code>改善了这种情况,注重吞吐量以及CPU资源场合,优先考虑<code>Parallel</code> 和<code>Parallel Old</code>搭配的组合</p></blockquote><h2 id="6-CMS-Concurrent-Mark-Sweep"><a href="#6-CMS-Concurrent-Mark-Sweep" class="headerlink" title="6.CMS(Concurrent Mark Sweep):"></a><em>6.CMS(Concurrent Mark Sweep):</em></h2><blockquote><p>标记-清除算法</p></blockquote><blockquote><p>注重最短回收时间</p></blockquote><blockquote><p>运行过程比前面的收集器更加复杂</p></blockquote><blockquote><p>互联网站或B/S系统服务端上的Java应用(占Java应用比很高)非常重视服务的响应速度</p></blockquote><blockquote><p>并发收集、低停顿</p></blockquote><blockquote><p>对CPU资源敏感,并发阶段容易导致应用程序变慢</p></blockquote><blockquote><p>无法处理浮动垃圾(<code>FLoating Garbage</code>,标记过程之后由于用户程序还在运行,继续产生的垃圾–当前GC处理不了了,留待下次GC清理),可能出现“Concurrent Mode Failure”(内存无法满足程序需求)导致另一次Full GC的产生,需要预留一部分空间提供并发收集时的程序运作使用</p></blockquote><blockquote><p>标记-清除算法导致大量空间碎片产生,大对象分配麻烦,容易出发Full GC</p></blockquote><blockquote><p>通过-XX:+UseCMSCompactAtFullCollection(开关参数)来应对内存碎片导致Full GC时进行内存碎片合并整理过程,但是内存整理过程无法并发,因此停顿时间增加</p></blockquote><blockquote><p>通过—XX:CMSFullGCsBeforeCompaction设置执行多少次不压缩Full GC之后来一次带压缩的,默认值为0</p></blockquote><h6 id="运行过程"><a href="#运行过程" class="headerlink" title="运行过程:"></a>运行过程:</h6><p>1.初始标记(<code>CMS</code> initial mark)</p><blockquote><p>需要“Stop the World”</p></blockquote><blockquote><p>标记的是GC Roots直接关联的对象,速度快</p></blockquote><p>2.并发标记(<code>CMS</code> concurrent mark)</p><blockquote><p>进行GC Roots Tracing</p></blockquote><p>3.重新标记(<code>CMS</code> remark)</p><blockquote><p>远短于并发标记时间</p></blockquote><blockquote><p>比初始标记阶段稍长</p></blockquote><blockquote><p>修正并发标记期间因用户程序继续运行导致标记产生变动的那一部分对象的标记记录</p></blockquote><p>4.并发清除(<code>CMS</code> concurrent sweep)</p><hr><blockquote><p><em>整个过程耗时最长的并发标记和并发清除过程可以与用户线程一起工作,所以整体上来说,CMS内存回收过程是与用户线程一起并发执行的</em></p></blockquote><h2 id="7-G1-Garbage-First"><a href="#7-G1-Garbage-First" class="headerlink" title="7.G1(Garbage-First):"></a><em>7.G1(Garbage-First):</em></h2><blockquote><p>并发与并行:充分利用了多CPU、多核环境的硬件优势,多个CPU缩短Stop-The—World停顿时间,部分其他收集器原来需要停顿Java线程执行的GC动作,G1可以通过并发让Java程序继续执行</p></blockquote><blockquote><p>分代收集:不需要其他收集器配合,独立管理整个GC堆;可以采用不同方式处理新创建的和已经存活一段时间、熬过多次GC的旧对象以获取更好的收集效果</p></blockquote><blockquote><p>空间整合:整体上是“标记-整理”算法,局部是“复制”算法实现,不会产生空间碎片</p></blockquote><blockquote><p>可预测的停顿:注重停顿时间的同时,可以建立可预测的停顿时间模型,能让使用者在一个长度为M毫秒的时间片段内,消耗在垃圾收集上的时间不超过N毫秒(这几乎是实时Java(<em>RTSJ</em>)的垃圾收集器的特征)</p></blockquote><blockquote><p>内存布局和其他相差很大,Java堆划分为多个大小相等的独立区域(Region),停顿时间模型的建立依靠有计划的避免在整个Java堆中进行全区域的垃圾收集</p></blockquote><blockquote><p>G1跟踪各个Region里面的垃圾堆积的价值大小(回收所获得的空间大小以及回收所需要的时间的经验值),在后台维护一个优先列表,每次根据允许的收集时间,优先回收价值最大的Region(这也就是<br>Grabage-First名称的由来)</p></blockquote><blockquote><p>每个Region都有一个与之对应的Remembered Set,通过在GC根节点的枚举范围中加入Remembered Set即可保证不对全堆扫描也不会有遗漏</p></blockquote><h6 id="运作过程大致如下-不计算维护Remembered-与CMS的过程很相似"><a href="#运作过程大致如下-不计算维护Remembered-与CMS的过程很相似" class="headerlink" title="运作过程大致如下(不计算维护Remembered 与CMS的过程很相似)"></a>运作过程大致如下(不计算维护Remembered 与CMS的过程很相似)</h6><p>1.初始标记(Initial Marking)<br>2.并发标记(Concurrent Marking)<br>3.最终标记(Final Marking)<br>4.筛选回收(Live Data Counting and Evacuation)</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Oct 23 2019 20:02:30 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;GARBAGE-COLLECTIONS&quot;&gt;&lt;a href=&quot;#GARBAGE-COLLECTIONS&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="GARBAGE COLLECTION" scheme="http://tengyan.site/tags/GARBAGE-COLLECTION/"/>
    
  </entry>
  
  <entry>
    <title>排序算法笔记</title>
    <link href="http://tengyan.site/2019/10/16/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    <id>http://tengyan.site/2019/10/16/排序算法笔记/</id>
    <published>2019-10-16T12:30:32.000Z</published>
    <updated>2019-10-17T12:28:50.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Oct 23 2019 20:02:30 GMT+0800 (GMT+08:00) --><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><blockquote><p>比较相邻两个节点大小，然后移动，一次完整遍历后尾端或首部形成最大或最小值，依次下去就排好序了，就如同水中泡泡“如果大了的话就会往上移动，导致最上面的是最大的”<code>java 冒泡排序要注意每次是否是在尾端生成的定位值，编写代码时注意要去掉这个位置的遍历，不要去错了</code></p></blockquote><p>###</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Oct 23 2019 20:02:30 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h3&gt;
      
    
    </summary>
    
      <category term="排序" scheme="http://tengyan.site/categories/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="冒泡排序" scheme="http://tengyan.site/tags/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>java 笔记01</title>
    <link href="http://tengyan.site/2019/10/15/java-%E7%AC%94%E8%AE%B001/"/>
    <id>http://tengyan.site/2019/10/15/java-笔记01/</id>
    <published>2019-10-15T11:26:34.000Z</published>
    <updated>2019-10-15T12:40:10.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Oct 23 2019 20:02:30 GMT+0800 (GMT+08:00) --><h3 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h3><blockquote><p>1.标记-清除算法<br>算法分为两个阶段：标记、清除，但是效率两个阶段都低，而且产生大量不连续内存碎片，导致提前处罚垃圾收集动作<br>2.复制算法<br>内存分为大小相等两块，但是每次只使用其中一块。当前一块用完了，复制存活对象到另一块上面，清理已使用的内存空间。但是耗费内存。改良算法为分为一块Eden和两块Survivor，HotSpot虚拟机默认两种比例8：1，不过当Survivor不够用时，需要老年代进行分配担保(Handle Promotion：存活对象直接进入老年代)<br>3.标记-整理算法<br>标记过程与第一种算法相同，但后续步骤是让所有存活对象都向一端移动，然后直接清理掉端边界以外的内存<br>4.分代收集算法</p></blockquote><h2 id="目前商业虚拟机都采用了这种算法，根据对象存活周期的不同将内存划分为几块，一般分为新生代与老年代，这样根据各年代特点采取特定算法。如果新生代，每次都有大批对象死去，采用复制算法；老年代因为对象存活率高，没有额外空间对它进行分配担保，就必须使用”标记-清理”或者”标记-整理”算法来进行回收"><a href="#目前商业虚拟机都采用了这种算法，根据对象存活周期的不同将内存划分为几块，一般分为新生代与老年代，这样根据各年代特点采取特定算法。如果新生代，每次都有大批对象死去，采用复制算法；老年代因为对象存活率高，没有额外空间对它进行分配担保，就必须使用”标记-清理”或者”标记-整理”算法来进行回收" class="headerlink" title="目前商业虚拟机都采用了这种算法，根据对象存活周期的不同将内存划分为几块，一般分为新生代与老年代，这样根据各年代特点采取特定算法。如果新生代，每次都有大批对象死去，采用复制算法；老年代因为对象存活率高，没有额外空间对它进行分配担保，就必须使用”标记-清理”或者”标记-整理”算法来进行回收"></a>目前商业虚拟机都采用了这种算法，根据对象存活周期的不同将内存划分为几块，一般分为新生代与老年代，这样根据各年代特点采取特定算法。如果新生代，每次都有大批对象死去，采用复制算法；老年代因为对象存活率高，没有额外空间对它进行分配担保，就必须使用”标记-清理”或者”标记-整理”算法来进行回收</h2><h6 id="hotsopt算法实现"><a href="#hotsopt算法实现" class="headerlink" title="hotsopt算法实现"></a>hotsopt算法实现</h6><ul><li>OopMap这种数据结构：直接得到哪些地方存在对象引用</li><li>安全点：程序停顿去gc的位置<br>以是否具有”<strong>让程序长时间执行的特征</strong>“为标准进行选定<br>有两种方案让gc发生时所有线程都跑到最近的安全点上再停顿下来：抢先式中断(Preemptive Suspension):<code>gc时先中断全部线程，有线程不在安全点，恢复线程，让它跑到安全点上，现在几乎没有虚拟机采用抢先式中断来暂停线程从而响应gc事件</code>；主动式终断(Voluntary Suspension): <code>gc需要中断线程时不直接对线程操作，设置标志，各个线程执行时主动轮询这个标志，发现中断标志为真就自己中断挂起，轮询标志的地方和安全点是重合的，另外加上创建对象需要分配内存的地方</code><br>安全区域:一段代码片段中，引用关系不发生变化。此区域任意地方开始gc都是安全的。进入安全区域的线程，离开之前要检查系统是否完成了根节点枚举(或者是整个gc过程)，完成了线程继续执行，反之必须等待到收到可以安全离开信号为止</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Oct 23 2019 20:02:30 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;垃圾收集算法&quot;&gt;&lt;a href=&quot;#垃圾收集算法&quot; class=&quot;headerlink&quot; title=&quot;垃圾收集算法&quot;&gt;&lt;/a&gt;垃圾收
      
    
    </summary>
    
    
      <category term="java" scheme="http://tengyan.site/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java 笔记</title>
    <link href="http://tengyan.site/2019/10/13/java1/"/>
    <id>http://tengyan.site/2019/10/13/java1/</id>
    <published>2019-10-13T07:16:32.000Z</published>
    <updated>2019-10-15T09:46:56.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Oct 23 2019 20:02:30 GMT+0800 (GMT+08:00) --><h3 id="java对象内存存储布局"><a href="#java对象内存存储布局" class="headerlink" title="java对象内存存储布局"></a>java对象内存存储布局</h3><blockquote><p>1.对象头(header)<br>2.实例数据(instance data)<br>3.对齐填充(padding)</p></blockquote><h3 id="GCRoots-作为起点的对象-的对象"><a href="#GCRoots-作为起点的对象-的对象" class="headerlink" title="GCRoots(作为起点的对象)的对象"></a>GCRoots(作为起点的对象)的对象</h3><blockquote><p>1.虚拟机栈（栈帧中的本地变量表）中引用的对象<br>2.方法区中类静态属性引用的对象<br>3.方法区中常量引用的对象<br>4.本地方法栈中JNI（即一般说的Native方法）引用的对象</p></blockquote><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><ul><li>强引用<blockquote><p>普遍存在</p></blockquote></li><li>软引用<blockquote><p>还有用并非必要，发生内存溢出前，将这些对象列入回收范围之中进行第二次回收，如果还没有足够内存，会抛出异常，JDK1.2后，提供SoftReference类来实现软引用</p></blockquote></li><li>弱引用<blockquote><p>弱引用描述非必需对象，强度比软引用更低，被弱引用关联的对象只能生存到下一次垃圾回收发生之前。JDk1.2之后，提供WeakReference类实现弱引用</p></blockquote></li><li>虚引用<blockquote><p>亦称为幽灵引用或者幻影引用，最弱的引用关系。是否有虚引用对一个对象来说完全不会影响其生存时间构成影响，也无法通过虚引用来取得一个对象实例。设置虚引用唯一目的就是为了能在对象被收集时收到一个系统通知。JDK1.2之后，提供了PhantomReference类来实现虚引用</p></blockquote></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      java
    
    </summary>
    
      <category term="java" scheme="http://tengyan.site/categories/java/"/>
    
    
      <category term="java jvm" scheme="http://tengyan.site/tags/java-jvm/"/>
    
  </entry>
  
  <entry>
    <title>a pg</title>
    <link href="http://tengyan.site/2019/07/15/a-pg/"/>
    <id>http://tengyan.site/2019/07/15/a-pg/</id>
    <published>2019-07-15T09:14:56.000Z</published>
    <updated>2019-07-15T09:16:46.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Oct 23 2019 20:02:30 GMT+0800 (GMT+08:00) --><p><code>第一篇文章</code></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Oct 23 2019 20:02:30 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;code&gt;第一篇文章&lt;/code&gt;&lt;/p&gt;&lt;!-- rebuild by neat --&gt;
      
    
    </summary>
    
    
      <category term="maybe" scheme="http://tengyan.site/tags/maybe/"/>
    
  </entry>
  
</feed>
